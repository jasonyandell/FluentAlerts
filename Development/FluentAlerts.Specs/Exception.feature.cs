// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.488
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs.FluentAlerts
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Exception")]
    public partial class ExceptionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Exception.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Exception", "In order to commiunicate the current system state in a human readable format\r\nAs " +
                    "a developer\r\nI want to be able to wrap an alert in an exception", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can create an alert exception from simple text")]
        public virtual void CanCreateAnAlertExceptionFromSimpleText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create an alert exception from simple text", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("a text message");
#line 8
 testRunner.When("I create an alert exception with the text message");
#line 9
 testRunner.Then("the exception alert contains a text block containing the text message");
#line 10
  testRunner.And("exception message is the text message");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can create an alert exception from a current builder")]
        public virtual void CanCreateAnAlertExceptionFromACurrentBuilder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create an alert exception from a current builder", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("a non-empty builder");
#line 14
 testRunner.When("I create an alert exception with the builder");
#line 15
 testRunner.Then("the exception alert is the alert created from the builder");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can create an alert exception from an alert")]
        public virtual void CanCreateAnAlertExceptionFromAnAlert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create an alert exception from an alert", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("an alert");
#line 19
 testRunner.When("I create an alert exception with the alert");
#line 20
 testRunner.Then("the exception alert is the alert");
#line 21
  testRunner.And("the exception message is the alert serialized to text");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can create an alert exception from simple text and other exception")]
        public virtual void CanCreateAnAlertExceptionFromSimpleTextAndOtherException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create an alert exception from simple text and other exception", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("a text message");
#line 25
  testRunner.And("an inner exception");
#line 26
 testRunner.When("I create an alert exception with text message and the inner exception");
#line 27
 testRunner.Then("the exception alert contains a text block containing the text message");
#line 28
  testRunner.And("exception message is the text message");
#line 29
  testRunner.And("inner exception is other exception");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can create an alert exception from a current builder and other exception")]
        public virtual void CanCreateAnAlertExceptionFromACurrentBuilderAndOtherException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create an alert exception from a current builder and other exception", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("a non-empty builder");
#line 33
  testRunner.And("an inner exception");
#line 34
 testRunner.When("I create an alert exception with a builder and other exception");
#line 35
 testRunner.Then("the exception alert is the alert created from the builder");
#line 36
 testRunner.And("inner exception is other exception");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can create an alert exception from an alert and other exception")]
        public virtual void CanCreateAnAlertExceptionFromAnAlertAndOtherException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create an alert exception from an alert and other exception", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("an alert");
#line 40
  testRunner.And("an inner exception");
#line 41
 testRunner.When("I create an alert exception with an alert and other exception");
#line 42
 testRunner.Then("the exception alert is the alert");
#line 43
  testRunner.And("the exception message is the alert serialized to text");
#line 44
  testRunner.And("inner exception is other exception");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
